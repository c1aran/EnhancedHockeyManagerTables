    <title>Enhanced Hockey Manager Table</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">    
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/normalize.css">
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/fontawesome/css/all.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.css">
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/jquery-3.4.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.js"></script>
    <script>
        /* Custom filtering function which will search data in column four between two values */
        $.fn.dataTable.ext.search.push(

            function( settings, data, dataIndex ) {

                var pgpMin = parseFloat( $('#pgpMin').val() );
                var pgpMax = parseFloat( $('#pgpMax').val() );
                var pgp = parseFloat( data[11] ) || 0; // use data for the p/gp column

                var priceMin = parseFloat( $('#priceMin').val() );
                var priceMax = parseFloat( $('#priceMax').val() );
                var price = parseFloat( data[12] ) || 0; // use data for the price column

                var ptsMin = parseInt( $('#ptsMin').val(), 10 );
                var ptsMax = parseInt( $('#ptsMax').val(), 10 );
                var points = parseFloat( data[10] ) || 0;

                var games = parseInt ( data[4], 10)

                if (
                    ( games > 0 ) && (                        
                        ( isNaN( priceMin ) && isNaN( priceMax ) ) ||
                        ( isNaN( priceMin ) && price <= priceMax ) ||
                        ( priceMin <= price && isNaN( priceMax ) ) ||
                        ( priceMin <= price && price <= priceMax )
                    ) && (
                        ( isNaN( ptsMin ) && isNaN( ptsMax ) ) ||
                        ( isNaN( ptsMin ) && points <= ptsMax ) ||
                        ( ptsMin <= points && isNaN( ptsMax ) ) ||
                        ( ptsMin <= points && points <= ptsMax ) 
                    ) && (
                        ( isNaN( pgpMin ) && isNaN( pgpMax ) ) ||
                        ( isNaN( pgpMin ) && pgp <= pgpMax ) ||
                        ( pgpMin <= pgp && isNaN( pgpMax ) ) ||
                        ( pgpMin <= pgp && pgp <= pgpMax ) 
                    )
                ) {
                    return true;
                }
                return false;
            }
        );
        
        $.extend( true, $.fn.dataTable.defaults, {
            "bPaginate": false,
        });

        $(document).ready(function() {
            var table = $('#playerTable').DataTable({
                ajax: {
                    url: '/data/table.json',
                    dataSrc: ''
                },
                columns: [
                    {
                        "class":          "details-control",
                        "orderable":      false,
                        "data":           null,
                        "defaultContent": ""
                    },
                    {data: 'player'},
                    {
                        data: 'team',
                        type: 'string'
                    },
                    {data: 'position'},
                    {data: 'games'},
                    {data: 'goalsTotal'},
                    {data: 'goalsOt'},
                    {data: 'assistsTotal'},
                    {data: 'assistsOt'},
                    {data: 'penalty'},
                    {
                        data: 'points',
                        type: 'num'
                    },
                    {
                        data: 'ptsPerGame',
                        type: 'num'
                    },
                    {data: 'price'},
                    {data: 'ptsPerM'},
                    {data: 'ptsCostPerGame'}
                ],
                "order": [[10, 'desc']]
            });

            function format ( d ) {

                let info = d.info[0];
                console.log(info);

                let infoList = '<ul class="playerInfo">';

                for (entry in info) {
                    infoList += '<li>' + entry + ': ' + info[entry] + '</li>';
                }

                infoList += '</ul>';

                return infoList;
            }
        
            // Array to track the ids of the details displayed rows
            var detailRows = [];
            
            $('#playerTable tbody').on( 'click', 'tr td.details-control', function () {
    
                var tr = $(this).closest('tr');
                var row = table.row( tr );
                var idx = $.inArray( tr.attr('id'), detailRows );

                if ( row.child.isShown() ) {

                    tr.removeClass( 'details' );
                    row.child.hide();

                    // Remove from the 'open' array
                    detailRows.splice( idx, 1 );

                } else {

                    tr.addClass( 'details' );
                    row.child( format( row.data() ) ).show();

                    // Add to the 'open' array
                    if ( idx === -1 ) {
                        detailRows.push( tr.attr('id') );
                    }
                }
            } );

            // On each draw, loop over the `detailRows` array and show any child rows
            table.on( 'draw', function () {
                $.each( detailRows, function ( i, id ) {
                    $('#' + id + ' td.details-control').trigger( 'click' );
                } );
            } );

            
            $('input.position-filter').on( 'keyup click', function () {
                console.log('Input: Position Filter');
                filterPosition( $(this).parents('tr').attr('data-column') );
            } );

            $('select[name=team]').on( 'change', function () {
                console.log('Input: Team Filter');
                filterTeam( $(this).parents('tr').attr('data-column') );
            } );

            $('#playerName').on('keyup', function(){
                console.log('Input: Player Name');
                filterPlayer( $(this).parents('tr').attr('data-column') )
            });

            // Event listener to the two range filtering inputs to redraw on input
            $('#priceMin, #priceMax, #ptsMin, #ptsMax, #pgpMin, #pgpMax').change( function() {
                table.draw();
            });

        });        

        function filterPosition () {
            $('#playerTable').DataTable().column( 3 ).search(
                $("input:radio[name=position]:checked").val()
            ).draw();
        }

        function filterTeam() {
            let value = $("select[name=team] > option:selected").val();
            $('#playerTable').DataTable().column( 2 ).search(value).draw();
        }

        function filterPlayer() {
            let value = $("#playerName").val();
            $('#playerTable').DataTable().column( 1 ).search(value).draw();
        }

    </script> 